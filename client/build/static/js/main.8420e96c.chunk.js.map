{"version":3,"sources":["store/commonStore.js","StartPage.js","store/LoginStore.js","login/LoginPage.js","store/RegisterStore.js","login/RegisterPage.js","store/TodosStore.js","todoApp/Todo.js","todoApp/TodoFunction.js","App.js","serviceWorker.js","index.js"],"names":["commonStore","observable","user","headers","this","user_id","isLogin","e","pathToTodos","concat","Index","react_default","a","createElement","className","react_router_dom","to","style","marginLeft","react_router","loginStore","email","password","isLoginSuccess","Login","observer","getUser","store","get","Object","assign","console","log","_this2","type","onChange","handleEdit","name","placeholder","value","onClick","preventDefault","handleLogin","Component","action","axios","post","then","response","data","code","alert","set","Content-Type","Accept","Authorization","access_token","_this3","target","registerStore","password_confirmation","isRegistrateSuccess","Register","handleRegister","TodosStore","id","task","todos","editDisabled","Todo","getAll","props","onLogout","ref","node","inputNode","marginBottom","onUpdate","onSubmit","map","todo","index","key","onCompleted","checked","completed","onEdit","onDelete","_this4","item","isCompleted","put","_this5","_this6","remove","history","push","itemid","delete","catch","err","res","_this7","toConsumableArray","reverse","App","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8420e96c.chunk.js","sourcesContent":["import {observable} from 'mobx';\n\nexport const commonStore = observable({\n   \n    user: {},\n\n    get headers(){\n        return this.user.headers\n    },\n\n    get user_id(){\n        return this.user.user_id\n    },\n\n    get isLogin(){\n        try{\n            if(this.user.user_id){\n                return true\n            }\n        }catch(e){}\n        return false\n    },\n\n    get pathToTodos(){\n       if(this.isLogin){\n            return `/todos/${this.user.user_id}`     \n       }\n       return '/'\n    }\n\n})","import React from 'react';\nimport {Link, Redirect} from 'react-router-dom'\n\nimport {commonStore} from './store/commonStore'\n\nexport default function Index(){\n    return(    \n        \n        <div className=\"container h-100\">\n            <div className=\"row text-center align-items-center h-100\">\n                <div className=\"col-md-12 text-left\">\n                    <div className=\"col-md-12 text-center\">\n                        <h1>Todo app</h1>\n                        <h2>To start use this application you need to login/registrate!</h2>\n                        <Link to=\"/login\">\n                            <button className=\"btn btn-success\">\n                                Login\n                            </button>\n                        </Link>\n                        <Link to=\"/register\">\n                            <button className=\"btn btn-warning\" style={{marginLeft: 5}}>\n                                Registrate\n                            </button>\n                        </Link>\n                    </div>\n                </div>    \n            </div>\n            {commonStore.isLogin ? (<Redirect to={commonStore.pathToTodos}/>) : ''}\n        </div>\n        \n       \n    )\n}","import {observable} from 'mobx';\n\nexport const loginStore = observable({\n    email: '',\n    password: '',\n\n    isLoginSuccess: false,\n})","import React, {Component} from 'react';\nimport {Redirect} from 'react-router-dom'\nimport {observer} from 'mobx-react'\nimport {action} from 'mobx'\nimport axios from 'axios';\nimport store from 'store'\n\nimport {loginStore} from '../store/LoginStore'\nimport { commonStore } from '../store/commonStore'\n\n\n\nexport default @observer class Login extends Component {\n    \n    @action\n    handleLogin = () => {\n        return axios.post('api/login', {\n            email: loginStore.email,\n            password: loginStore.password\n        })\n        .then(response => {\n            if(response.data.code === 401){\n                return alert(\"incorrect data!\")\n            }\n            store.set('user', {\n                user_id: response.data.user_id,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': response.data.access_token\n                },\n            })\n            this.getUser()\n            loginStore.isLoginSuccess = true\n        })\n    }\n\n    @action\n    handleEdit = (e) => {\n        loginStore[e.target.name] = e.target.value  \n    }\n\n    componentDidMount(){\n    }\n\n\n    getUser = () => {\n        try {\n            if (store.get('user')) {\n                commonStore.user = Object.assign({}, store.get('user'))\n            }\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    render(){\n        return (\n            <div className=\"container\">\n                <h1 className=\"text-center\">Login page</h1>\n\n                <form>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Email</label>\n                        <div className=\"col-sm-10\">\n                        <input type=\"email\" \n                        onChange={\n                            this.handleEdit\n                        }\n                        name='email'\n                        className=\"form-control\" \n                        placeholder=\"Email\"\n                        value={loginStore.email}\n                        />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Password</label>\n                        <div className=\"col-sm-10\">\n                        <input type=\"password\" \n                        onChange={\n                            this.handleEdit\n                        }\n                        name=\"password\"\n                        className=\"form-control\" \n                        placeholder=\"Password\"\n                        value={loginStore.password}\n                        />\n                        </div>\n                    </div>\n                    \n                        <button type=\"submit\" \n                        onClick={\n                            (e) => {\n                                e.preventDefault()\n                                this.handleLogin()\n                            }\n                        } \n                        className=\"btn btn-primary\">Login</button>\n                    {loginStore.isLoginSuccess ? <Redirect to={commonStore.pathToTodos}/> : ''}\n                </form>\n            </div>\n        )\n    }\n}","import {observable} from 'mobx';\n\nexport const registerStore = observable({\n    name: '',\n    email: '',\n    password: '',\n    password_confirmation: '',\n    \n    isRegistrateSuccess: false\n})","import React, {Component} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {observer} from 'mobx-react'\nimport {action} from 'mobx'\n\nimport axios from 'axios';\nimport store from 'store';\n\nimport {registerStore} from '../store/RegisterStore'\nimport { commonStore } from '../store/commonStore';\n\n\nexport default @observer class Register extends Component {\n\n    @action\n    handleRegister = () => {\n        return axios.post('api/register', {\n            name: registerStore.name,\n            email: registerStore.email,\n            password: registerStore.password,\n            password_confirmation: registerStore.password_confirmation,\n        })\n        .then(response => {\n            if(response.data.code===200){\n                store.set('user', {\n                    user_id: response.data.user_id,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': response.data.access_token\n                    },\n                })\n                this.getUser()\n                registerStore.isRegistrateSuccess = true\n                return console.log('registration success!')\n            }\n            console.log('invalid data')\n            return alert('registration data invalid')\n        })\n    }\n\n    @action\n    handleEdit = (e) => {\n        registerStore[e.target.name] = e.target.value  \n    }\n\n    getUser = () => {\n        try {\n            if (store.get('user')) {\n                commonStore.user = Object.assign({}, store.get('user'))\n            }\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    render(){\n        return (\n            <div className=\"container\">\n                <h1 className=\"text-center\">Register page</h1>\n\n                <form>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Name</label>\n                        <div className=\"col-sm-10\">\n                        <input type=\"Name\" \n                        name='name'\n                        onChange={\n                            this.handleEdit\n                        }\n                        value={\n                            registerStore.name\n                        }\n                        className=\"form-control\" \n                        placeholder=\"Name\"/>\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Email</label>\n                        <div className=\"col-sm-10\">\n                        <input type=\"email\" \n                        className=\"form-control\" \n                        onChange={\n                            this.handleEdit\n                        }\n                        value={\n                            registerStore.email\n                        }\n                        name=\"email\"\n                        placeholder=\"Email\"/>\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Password</label>\n                        <div className=\"col-sm-10\">\n                        <input type=\"password\" \n                        name=\"password\"\n                        onChange={\n                            this.handleEdit\n                        }\n                        className=\"form-control\" \n                        value={registerStore.password}\n                        placeholder=\"Password\"/>\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Confirm password</label>\n                        <div className=\"col-sm-10\">\n                        <input type=\"password\" \n                        name=\"password_confirmation\"\n                        onChange={\n                            this.handleEdit\n                        }\n                        className=\"form-control\"\n                        value={registerStore.password_confirmation} \n                        placeholder=\"Password\"/>\n                        </div>\n                    </div>\n                    \n                    <button type=\"submit\" \n                    className=\"btn btn-primary\"\n                    onClick={(e)=>{\n                        e.preventDefault()\n                        this.handleRegister()\n                    }}\n                    >Register</button>\n                    {registerStore.isRegistrateSuccess ? <Redirect to={commonStore.pathToTodos}/> : ''}\n                </form>\n            </div>\n        )\n    }\n}","import {observable} from 'mobx';\n\nexport const TodosStore = observable({\n    id: '',\n    task: '',\n    todos: [],\n    \n    editDisabled: false,\n})","import React, {Component} from \"react\"\nimport {Link} from 'react-router-dom'\nimport { observer } from 'mobx-react'\nimport { action } from 'mobx'\n\nimport {addTodo, deleteTodo, getTodos, updateTodo, completeTodo} from './TodoFunction'\n\nimport {TodosStore} from '../store/TodosStore'\nimport {loginStore} from '../store/LoginStore'\nimport {registerStore} from '../store/RegisterStore'\nimport { commonStore } from \"../store/commonStore\";\n\nimport store from 'store'\n\nexport default @observer class Todo extends Component{\n\n    @action\n    onSubmit = () => {\n        addTodo(TodosStore.task)\n        TodosStore.task = ''\n        this.getAll()\n    }\n\n    @action\n    onChange = () => {\n        TodosStore.task = this.inputNode.value\n    }\n\n    @action\n    onCompleted = (item) => {\n        completeTodo(!item.completed, item.id)\n        this.getAll()\n        console.log(item.completed)\n    } \n\n    @action\n    onUpdate = () => {\n        updateTodo(TodosStore.task, TodosStore.id)\n        \n        TodosStore.task = ''\n        TodosStore.id = ''\n        TodosStore.editDisabled = false\n    \n        this.getAll()\n    }\n\n    @action\n    onEdit = (item) => {\n            TodosStore.task = item.task\n            TodosStore.id = item.id\n            TodosStore.editDisabled = true\n    }\n\n    @action\n    onLogout =(props) => {\n        store.remove('user')\n        commonStore.user = {}\n        props.history.push('/')\n    }\n\n    @action\n    onDelete = (itemid) => {\n        deleteTodo(itemid)\n        this.getAll()\n    }\n\n    @action\n    componentWillMount(){\n        loginStore.isLoginSuccess = false\n        registerStore.isRegistrateSuccess = false\n        this.getAll()\n    }\n\n    @action\n    getAll = () => {\n        getTodos().then(response => {\n            TodosStore.task = ''\n            TodosStore.todos = [...response.data].reverse()\n        })\n    }\n\n    render(){\n       console.log(this.props)\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-7 mx-auto text-right\">\n                        <h1> TodosList </h1>\n                    </div>\n                    <div className=\"col-md-5 mx-auto text-right\">\n                        <Link to='/' >\n                            <button className=\"btn btn-outline-danger\"\n                            onClick={(e)=>{e.preventDefault()\n                                            this.onLogout(this.props)\n                            }}\n                            >\n                                Logout\n                            </button>\n                        </Link>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-9 mx-auto\">\n                        <div className=\"form-group\" >\n                            <input type=\"text\"\n                            className=\"form-control\"\n                            ref={node => this.inputNode = node}\n                            onChange={this.onChange}\n                            value={TodosStore.task}\n                            style={{marginBottom: 5}}\n                            />\n                            {!TodosStore.editDisabled ? (\n                                <button className=\"btn btn-success btn-block\"\n                                onClick={(e)=> {e.preventDefault()\n                                                this.onSubmit()}\n                                }\n                                >Add todo</button>\n                            ) : (\n                                <button className=\"btn btn-success btn-block\"\n                                onClick={(e) => {e.preventDefault()\n                                    this.onUpdate()}}\n                                >Update todo</button>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-9 mx-auto\">\n                        <table className=\"table\">\n                            <tbody>        \n                                {TodosStore.todos.map((todo, index) => (\n                                    <tr key={index}>\n                                        <td>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-9\">\n                                                    <input type=\"checkbox\" \n                                                    onChange={(e)=>{\n                                                        e.preventDefault()\n                                                        this.onCompleted(todo)\n                                                    }}\n                                                    checked={todo.completed}\n                                                    />\n                                                    {todo.completed ? (\n                                                        <s>{todo.task}</s>\n                                                    ) : (\n                                                        todo.task\n                                                    )}\n                                                </div>\n                                                <div className=\"col-md\">\n                                                    <button className=\"btn btn-outline-info\"\n                                                    onClick={(e) => {e.preventDefault()\n                                                        this.onEdit(todo)}}\n                                                    >\n                                                        edit\n                                                    </button>\n                                                    <button className=\"btn btn-danger\"\n                                                    onClick={(e)=> {e.preventDefault()\n                                                        this.onDelete(todo.id)}}\n                                                    >\n                                                        delete\n                                                    </button>\n                                                </div>\n                                                \n                                            </div>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}","import axios from 'axios';\n\nimport {commonStore} from '../store/commonStore'\n\nexport const getTodos = () => {\n    return axios.get(`/api/todos/${commonStore.user_id}`, {\n        headers: commonStore.headers   \n    })\n}\n\nexport const addTodo = (task) => {\n    axios.post(`/api/todos/${commonStore.user_id}`, {\n        task: task,\n        user_id: commonStore.user_id,\n    }, {\n        headers: commonStore.headers\n    })\n}\n\nexport const deleteTodo = (id) => {\n    axios.delete(`/api/todos/${commonStore.user_id}/${id}`,{\n        headers: commonStore.headers\n    })\n    .catch(err=>console.log(err))\n    .then(res => console.log(res))\n}\n\nexport const completeTodo = (isCompleted, id) => {\n    axios.put(`/api/todos/${commonStore.user_id}/${id}`, {\n        completed: isCompleted,\n    },{\n        headers: commonStore.headers\n    })\n}\n\nexport const updateTodo = (task, id) => {\n    axios.put(`/api/todos/${commonStore.user_id}/${id}`, {\n        task: task,\n    },{\n        headers: commonStore.headers\n    })\n}","import React from 'react'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport {observer} from 'mobx-react'\nimport { action } from 'mobx'\nimport store from 'store'\n\nimport Index from './StartPage'\nimport Login from './login/LoginPage'\nimport Register from './login/RegisterPage'\nimport Todo from './todoApp/Todo'\n\nimport { commonStore } from './store/commonStore'\n\nexport default @observer class App extends React.Component {\n\n  @action\n  componentWillMount(){\n    this.getUser()\n  }\n\n  getUser = () => {\n    try{\n      if(store.get('user')){\n        commonStore.user = Object.assign({}, store.get('user'))\n      }\n    }catch(e){\n      console.log(e)\n    }\n  }\n\n  render() {\n    return (\n      <Router>    \n\n        <Route exact path=\"\" component={Index}/>\n        <Route exact path=\"/login\" component={Login}/>\n        <Route exact path=\"/register\" component={Register}/>\n        {commonStore.isLogin ? (<Route exact path={commonStore.pathToTodos} component={Todo} />) : ''}\n         \n      </Router>\n    )\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}